
### Generalities
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Full Infrastructure Template
#
#
### Create ressources
Resources:
  ###############
  #   Network   #
  ###############
  #
  #
  ### First step : Create VPC
  SodbavekaVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: 'sodbaveka-main-VPC'
        - Key: Project
          Value: 'P14_OCR'
  # ### Next step : Create private subnets in new VPC
  # PrivateSubnetA:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3a
  #     CidrBlock: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-a'
  #     VpcId: !Ref SodbavekaVPC 
  # PrivateSubnetB:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3b
  #     CidrBlock: 10.0.20.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-b'
  #     VpcId: !Ref SodbavekaVPC 
  # PrivateSubnetC:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3c
  #     CidrBlock: 10.0.30.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-c'
  #     VpcId: !Ref SodbavekaVPC 
  ### Next step : Create public subnets in new VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-a'
      VpcId: !Ref SodbavekaVPC  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-b'
      VpcId: !Ref SodbavekaVPC 
  # PublicSubnetC:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3c
  #     CidrBlock: 10.0.3.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-public-c'
  #     VpcId: !Ref SodbavekaVPC
  ### Next step : Create internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'sodbaveka-internet-gateway'
  ### Next step : Attach internet gateway to VPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SodbavekaVPC
      InternetGatewayId: !Ref InternetGateway
  # ### Next step : Create elastic IPs for NAT gateways
  # NatEipC:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-elastic-ip-c'
  # ### Next step : Create NAT gateways
  # NatGatewayC:
  #   DependsOn: AttachInternetGateway
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEipC.AllocationId
  #     SubnetId: !Ref PublicSubnetC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-nat-c'
  ### Next step : Create route tables
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-public-a'
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-public-b'
  # PublicRouteTableC:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-public-c'
  # PrivateRouteTableA:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-a'
  # PrivateRouteTableB:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-b'
  # PrivateRouteTableC:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-c'
  ### Next step : Create route tables associations
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  # AttachPublicRouteTableC:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTableC
  #     SubnetId: !Ref PublicSubnetC
  # AttachPrivateRouteTableA:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableA
  #     SubnetId: !Ref PrivateSubnetA
  # AttachPrivateRouteTableB:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableB
  #     SubnetId: !Ref PrivateSubnetB
  # AttachPrivateRouteTableC:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableC
  #     SubnetId: !Ref PrivateSubnetC
  ### Next step : Create routes for the public subnet of Availability Zone A
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  ### Next step : Create routes for the public subnet of Availability Zone B
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  # ### Next step : Create routes for the public subnet of Availability Zone C
  # PublicRouteC:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway
  #     RouteTableId: !Ref PublicRouteTableC
  # ### Next step : Create routes for the private subnet of Availability Zone C
  # PrivateRouteC:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayC
  #     RouteTableId: !Ref PrivateRouteTableC
  # PrivateRouteC2:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 192.168.100.0/24
  #     InstanceId: !Ref AwsVpnEc2
  #     RouteTableId: !Ref PrivateRouteTableC
  #
  #
  # ##################
  # #   Ressources   #
  # ##################
  #
  #
  ### First step : Create EC2 Security Group
  InfraEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: -1
        #   FromPort: 80
        #   ToPort: 80
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-securityG'
        - Key: Project
          Value: 'P14_OCR'
  #
  #
  # ### Next step : Create jenkins EC2 instance 
  # AwsJenkinsEc2:
  #   Type : AWS::EC2::Instance
  #   Properties:
  #     InstanceType: t2.micro
  #     ImageId: ami-00c08ad1a6ca8ca7c
  #     KeyName: P10-aws
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: "0"
  #         GroupSet: 
  #           - !Ref InfraEC2SecurityGroup
  #         SubnetId: !Ref PublicSubnetA
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-jenkins-ec2'
  #       - Key: Project
  #         Value: 'P14_OCR'
  #     UserData: 
  #       'Fn::Base64': !Sub |
  #         #!/bin/bash
  #         export STACK_NAME=${AWS::StackName}
  #         echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
  #         echo "Who am i ? AwsJenkinsEc2" >> /home/ec2-user/TEMOIN-001

  #         echo "OS update : In progress..." >> /var/log/userdata.txt
  #         yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

  #         amazon-linux-extras install epel -y
          
  #         echo "Jenkins installation : In progress..." >> /var/log/userdata.txt
  #         wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  #         rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  #         yum upgrade
  #         amazon-linux-extras install java-openjdk11 -y  
  #         yum install git -y      
  #         yum install -y jenkins
  #         systemctl enable jenkins
  #         systemctl start jenkins
  #         echo "Jenkins installation : Completed." >> /var/log/userdata.txt

  #         echo "Docker installation : In progress..." >> /var/log/userdata.txt
  #         amazon-linux-extras install docker
  #         systemctl enable docker
  #         usermod -a -G docker ec2-user
  #         usermod -a -G docker jenkins
  #         echo "Docker installation : Completed." >> /var/log/userdata.txt
  #         reboot
 #
 #
  ### Next step : Create staging EC2 cluster 
  kubemaster01:
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref InfraEC2SecurityGroup
          SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: 'sodbaveka-staging-kubemaster'
        - Key: Project
          Value: 'P14_OCR'
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "Who am i ? : "$HOSTNAME >> /home/ec2-user/TEMOIN-001
          export PRIVATE_IP="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
          echo "Private ip ? : "$PRIVATE_IP >> /home/ec2-user/TEMOIN-001

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          amazon-linux-extras install epel -y
          
          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          usermod -a -G docker ec2-user
          systemctl start docker
          echo "Docker installation : Completed." >> /var/log/userdata.txt

          echo "k8s installation : In progress..." >> /var/log/userdata.txt
          swapoff -a
          cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          exclude=kubelet kubeadm kubectl
          EOF
          setenforce 0
          sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
          yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
          systemctl enable --now kubelet
          echo "k8s installation : Completed." >> /var/log/userdata.txt

          echo "k8s server initialisation : In progress..." >> /var/log/userdata.txt
          kubeadm init --apiserver-advertise-address=$PRIVATE_IP --node-name $HOSTNAME --pod-network-cidr=192.168.0.0/16
          cho "k8s server initialisation : Completed." >> /var/log/userdata.txt

  #
  # 
  kubeworker01:
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref InfraEC2SecurityGroup
          SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: 'sodbaveka-staging-kubeworker'
        - Key: Project
          Value: 'P14_OCR'
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "Who am i ? : "$HOSTNAME >> /home/ec2-user/TEMOIN-001
          export PRIVATE_IP="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
          echo "Private ip ? : "$PRIVATE_IP >> /home/ec2-user/TEMOIN-001

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          amazon-linux-extras install epel -y
          
          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          usermod -a -G docker ec2-user
          systemctl start docker
          echo "Docker installation : Completed." >> /var/log/userdata.txt
          
          echo "k8s installation : In progress..." >> /var/log/userdata.txt
          swapoff -a
          cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          exclude=kubelet kubeadm kubectl
          EOF
          setenforce 0
          sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
          yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
          systemctl enable --now kubelet
          echo "k8s installation : Completed." >> /var/log/userdata.txt
